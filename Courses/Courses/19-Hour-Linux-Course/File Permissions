# 🔐 Linux File Permissions Guide

## 📌 Basic Concepts

Every file and directory in Linux has three permission categories:

- **User (u)**: Owner of the file
- **Group (g)**: Group associated with the file
- **Others (o)**: Everyone else

Each category has three permissions:
- **r** – read
- **w** – write
- **x** – execute

### Example:
```bash
-rwxr-xr-- 1 user group 1234 Jan 1 12:00 example.sh
chmod – Change permissions
chmod 755 file.txt      # rwxr-xr-x
chmod u+x script.sh     # Add execute for user
chmod go-w file.txt     # Remove write for group & others
chown – Change file owner/group 
chown user:group file.txt
chgrp – Change group chgrp groupname file.txt
🧪 Special Permissions

📍 SetUID (s)
	•	Executes the file as the file’s owner
chmod u+s script.sh
📍 SetGID (s)
	•	Executes as group OR new files inherit the group
chmod g+s directory/
📍 Sticky Bit (t)
	•	On directories: Only owner can delete their files
chmod +t /tmp
🔍 Viewing Permissions
ls -l                # View permission string
stat file.txt        # Detailed metadata
🗂 ACLs – Access Control Lists
setfacl -m u:john:rwx file.txt
getfacl file.txt
🧠 Tips for Remembering
	•	Use ls -l often to build familiarity.
	•	Practice changing and breaking permissions in a test directory.
	•	Understand the numeric values:
	•	r=4, w=2, x=1
	•	So chmod 754 = rwxr-xr--

⸻

✅ Progress Checklist
	•	Understand read, write, execute
	•	Practice with chmod and numeric values
	•	Practice with SetUID, SetGID, Sticky Bit
	•	Learn and apply ACLs
	•	Complete a permission-based project
# 🔐 Linux File Permissions & Ownership

These notes are part of my hands-on learning journey as I study to become a Linux System Administrator. This guide covers file permissions, ownership, and special modes in Linux—along with examples, tips, and real-world use cases.

---

## 📖 Understanding Linux Permissions

Every file and directory has three permission sets:

| Class     | Applies to         |
|-----------|--------------------|
| `User`    | File owner         |
| `Group`   | Group assigned     |
| `Others`  | Everyone else      |

Each class can have:
- `r` – Read
- `w` – Write
- `x` – Execute

Example:
```bash
-rwxr-xr-- 1 user group 1234 Jun 10 12:00 my_script.sh

 Using chmod – Change File Permissions

Octal (Numeric) Format:
rwx.      Value
—         0
–x        1
-w        2
-wx       3
r–        4
r-x       5
rw-       6
rwx       7

Symbolic Format:
chmod 755 file.sh  # rwx for user, rx for group & others
chmod u+x file.sh      # Add execute to user
chmod go-w config.txt  # Remove write from group & others
chmod a+r notes.md     # Add read for all
👤 chown – Change File Ownership:
chown username:group file.txt

chown root:root /etc/passwd
chown sa:shell files.txt

🧑‍🤝‍🧑 chgrp – Change Group Ownership:
chgrp developers script.py

📁 Directory Permissions
Permission
Meaning
r-View contents
w-Create/delete files
x-Enter directory (cd)
⚠️ Without x, you can’t even cd into a readable directory!



🧙 Special Bits
Bit     Symbol    Purpose
Setuid.   s    Execute as file owner
Setgid.   s    New files inherit group
Sticky    t    Only file owner can delete in dir
chmod +s file       # setuid
chmod g+s folder    # setgid
chmod +t /tmp       # sticky bit
ls -l file.txt
ls -ld directory/
stat my_script.sh
Task
Command
Script won’t run
chmod +x script.sh
Share a folder with a group
chgrp dev folder && chmod g+rwX folder
Secure a config file
chmod 600 config.yml
Assign ownership to a user
chown user:group file.txt

---

Let me know if you want help adding this to your actual GitHub repo or linking it inside your README.
